name: healthcheck

on:
  workflow_dispatch:  # 手動実行のみ

permissions:
  contents: read
  issues: write

jobs:
  ping:
    runs-on: ubuntu-latest
    steps:
      - name: Resolve HEALTH_URL
        id: resolve
        run: |
          if [ -n "${{ secrets.HEALTH_URL }}" ]; then
            echo "HEALTH_URL=${{ secrets.HEALTH_URL }}" >> "$GITHUB_OUTPUT"
          elif [ -n "${{ vars.HEALTH_URL }}" ]; then
            echo "HEALTH_URL=${{ vars.HEALTH_URL }}" >> "$GITHUB_OUTPUT"
          elif [ -n "${{ vars.PROJECT_REF }}" ]; then
            echo "HEALTH_URL=https://${{ vars.PROJECT_REF }}.functions.supabase.co/ai-trader/health" >> "$GITHUB_OUTPUT"
          else
            echo "HEALTH_URL=" >> "$GITHUB_OUTPUT"
          fi

      - name: Ping health endpoint (measure latency)
        env:
          HEALTH_URL: ${{ steps.resolve.outputs.HEALTH_URL }}
        run: |
          if [ -z "$HEALTH_URL" ]; then
            echo "HEALTH_URL not set"; exit 1
          fi
          start=$(date +%s%3N)
          HTTP_CODE=$(curl -s -o resp.json -w "%{http_code}" "$HEALTH_URL") || true
          end=$(date +%s%3N)
          LATENCY=$((end-start))
          echo "HTTP_CODE=$HTTP_CODE"
          echo "Latency=${LATENCY}ms"
          echo "HTTP_CODE=$HTTP_CODE" >> "$GITHUB_ENV"
          echo "LATENCY=$LATENCY" >> "$GITHUB_ENV"
          OK=$(jq -r '.ok // "false"' resp.json 2>/dev/null || echo "false")
          cat resp.json || true
          if [ "$HTTP_CODE" = "200" ] && [ "$OK" = "true" ]; then
            echo "Health check OK."
            exit 0
          else
            echo "Health check failed"
            exit 1
          fi

      - name: Create issue on failure
        if: failure()
        uses: actions/github-script@v7
        env:
          HEALTH_URL: ${{ steps.resolve.outputs.HEALTH_URL }}
          LATENCY: ${{ env.LATENCY }}
          HTTP_CODE: ${{ env.HTTP_CODE }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const runUrl = `${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID}`;
            const resp = fs.existsSync('resp.json') ? fs.readFileSync('resp.json','utf8') : '(no resp.json)';
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Healthcheck failed: HTTP ${process.env.HTTP_CODE || '???'} (${new Date().toISOString()})`,
              body: [
                `**HEALTH_URL**: ${process.env.HEALTH_URL || '(not resolved)'}`,
                `**HTTP_CODE**: ${process.env.HTTP_CODE || '(n/a)'}`,
                `**Latency**: ${process.env.LATENCY ? process.env.LATENCY + 'ms' : '(n/a)'}`,
                `**Run**: ${runUrl}`,
                '',
                '### Response',
                '```json',
                resp,
                '```'
              ].join('\n'),
              labels: ['bug','healthcheck']
            });